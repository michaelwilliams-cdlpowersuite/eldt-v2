/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * Ampli - A strong typed wrapper for your Analytics
 *
 * This file is generated by Amplitude.
 * To update run 'ampli pull angularclient'
 *
 * Required dependencies: @amplitude/analytics-browser@^1.3.0
 * Tracking Plan Version: 2
 * Build: 1.0.0
 * Runtime: browser:typescript-ampli-v2
 *
 * [View Tracking Plan](https://data.amplitude.com/eldt/default/events/main/latest)
 *
 * [Full Setup Instructions](https://data.amplitude.com/eldt/default/implementation/angularclient)
 */

import * as amplitude from '@amplitude/analytics-browser';

export type Environment = 'default';

export const ApiKey: Record<Environment, string> = {
  default: '1181f86d518cc71a8809cd4f6db6325d'
};

/**
 * Default Amplitude configuration options. Contains tracking plan information.
 */
export const DefaultConfiguration: BrowserOptions = {
  plan: {
    version: '2',
    branch: 'main',
    source: 'angularclient',
    versionId: 'd6e407c4-fb68-4935-b978-4b47e0b94116'
  },
  ...{
    ingestionMetadata: {
      sourceName: 'browser-typescript-ampli',
      sourceVersion: '2.0.0'
    }
  }
};

export interface LoadOptionsBase { disabled?: boolean }

export type LoadOptionsWithEnvironment = LoadOptionsBase & { environment: Environment; client?: { configuration?: BrowserOptions; }; };
export type LoadOptionsWithApiKey = LoadOptionsBase & { client: { apiKey: string; configuration?: BrowserOptions; } };
export type LoadOptionsWithClientInstance = LoadOptionsBase & { client: { instance: BrowserClient; } };

export type LoadOptions = LoadOptionsWithEnvironment | LoadOptionsWithApiKey | LoadOptionsWithClientInstance;

export interface IdentifyProperties {
  /**
   * This is the CDL class that the select on the first step of registration
   */
  "CDL Class"?: string;
  "ELDT Application CDL Completion Date"?: string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Item Type | string |
   */
  "ELDT Application CDL Type"?: string[];
  /**
   * | Rule | Value |
   * |---|---|
   * | Item Type | string |
   */
  "ELDT Application Endorsements"?: string[];
  /**
   * | Rule | Value |
   * |---|---|
   * | Item Type | string |
   */
  "ELDT Application Type of Work"?: string[];
  HAZ?: boolean;
  Passenger?: boolean;
  "School Bus"?: boolean;
}

export interface CtaButtonClickedProperties {
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | Student Portal - Unlock Now, Student Portal - Find School, Student Portal - Download MVR, school-bus-passanger-page-hero-button, first-time-cdl-page-hero-button, pricing-page-mastercourse-button, pricing-page-eldt-written-button, pricing-page-hazmat-endorsement-button, pricing-page-tanker-endorsement-button, pricing-page-school-bus-endorsement-button, pricing-page-passenger-endorsement-button, klaviyo-hazmat-endorsement-1-button |
   */
  "Button ID":
    | "Student Portal - Unlock Now"
    | "Student Portal - Find School"
    | "Student Portal - Download MVR"
    | "school-bus-passanger-page-hero-button"
    | "first-time-cdl-page-hero-button"
    | "pricing-page-mastercourse-button"
    | "pricing-page-eldt-written-button"
    | "pricing-page-hazmat-endorsement-button"
    | "pricing-page-tanker-endorsement-button"
    | "pricing-page-school-bus-endorsement-button"
    | "pricing-page-passenger-endorsement-button"
    | "klaviyo-hazmat-endorsement-1-button";
}

export interface EndorsementToggledProperties {
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | HAZ, Passenger, School Bus |
   */
  endorsement: "HAZ" | "Passenger" | "School Bus";
  selected: boolean;
}

export interface LoginProperties {
  type: string;
}

export interface PackageSelectedProperties {
  "package id": string;
  "previous package": string;
  "previous package id": string;
}

export interface PowerLeadFormSubmittedProperties {
  city: string;
  phone: string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Unique Items | true |
   * | Item Type | string |
   */
  "requested training": string[];
  "schools found": boolean;
  state: string;
  zip: string;
}

export interface PurchaseProperties {
  "product name": string;
  "transaction id": string;
}

export interface RegistrationApplicationCompletedProperties {
  city: string;
  state: string;
  zip: string;
}

export interface RegistrationStepSubmittedProperties {
  completed: boolean;
  "had errors": boolean;
  "step number": string;
}

export interface SignupProperties {
  type: string;
}

export class Identify implements BaseEvent {
  event_type = amplitude.Types.SpecialEventType.IDENTIFY;

  constructor(
    public event_properties?: IdentifyProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class CtaButtonClicked implements BaseEvent {
  event_type = 'CTA Button Clicked';

  constructor(
    public event_properties: CtaButtonClickedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class EmailVerified implements BaseEvent {
  event_type = 'Email Verified';
}

export class EndorsementToggled implements BaseEvent {
  event_type = 'Endorsement Toggled';

  constructor(
    public event_properties: EndorsementToggledProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class Login implements BaseEvent {
  event_type = 'Login';

  constructor(
    public event_properties: LoginProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class PackageSelected implements BaseEvent {
  event_type = 'Package Selected';

  constructor(
    public event_properties: PackageSelectedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class PowerLeadFormSubmitted implements BaseEvent {
  event_type = 'Power Lead Form Submitted';

  constructor(
    public event_properties: PowerLeadFormSubmittedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class Purchase implements BaseEvent {
  event_type = 'Purchase';

  constructor(
    public event_properties: PurchaseProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class RegistrationApplicationCompleted implements BaseEvent {
  event_type = 'Registration - Application Completed';

  constructor(
    public event_properties: RegistrationApplicationCompletedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class RegistrationStepSubmitted implements BaseEvent {
  event_type = 'Registration Step Submitted';

  constructor(
    public event_properties: RegistrationStepSubmittedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class Signup implements BaseEvent {
  event_type = 'Signup';

  constructor(
    public event_properties: SignupProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export type PromiseResult<T> = { promise: Promise<T | void> };

const getVoidPromiseResult = () => ({ promise: Promise.resolve() });

// prettier-ignore
export class Ampli {
  private disabled: boolean = false;
  private amplitude?: BrowserClient;

  get client(): BrowserClient {
    this.isInitializedAndEnabled();
    return this.amplitude!;
  }

  get isLoaded(): boolean {
    return this.amplitude != null;
  }

  private isInitializedAndEnabled(): boolean {
    if (!this.amplitude) {
      console.error('ERROR: Ampli is not yet initialized. Have you called ampli.load() on app start?');
      return false;
    }
    return !this.disabled;
  }

  /**
   * Initialize the Ampli SDK. Call once when your application starts.
   *
   * @param options Configuration options to initialize the Ampli SDK with.
   */
  load(options: LoadOptions): PromiseResult<void> {
    this.disabled = options.disabled ?? false;

    if (this.amplitude) {
      console.warn('WARNING: Ampli is already intialized. Ampli.load() should be called once at application startup.');
      return getVoidPromiseResult();
    }

    let apiKey: string | null = null;
    if (options.client && 'apiKey' in options.client) {
      apiKey = options.client.apiKey;
    } else if ('environment' in options) {
      apiKey = ApiKey[options.environment];
    }

    if (options.client && 'instance' in options.client) {
      this.amplitude = options.client.instance;
    } else if (apiKey) {
      this.amplitude = amplitude.createInstance();
      const configuration = (options.client && 'configuration' in options.client) ? options.client.configuration : {};
      return this.amplitude.init(apiKey, undefined, { ...DefaultConfiguration, ...configuration });
    } else {
      console.error("ERROR: ampli.load() requires 'environment', 'client.apiKey', or 'client.instance'");
    }

    return getVoidPromiseResult();
  }

  /**
   * Identify a user and set user properties.
   *
   * @param userId The user's id.
   * @param properties The user properties.
   * @param options Optional event options.
   */
  identify(
    userId: string | undefined,
    properties?: IdentifyProperties,
    options?: EventOptions,
  ): PromiseResult<Result> {
    if (!this.isInitializedAndEnabled()) {
      return getVoidPromiseResult();
    }

    if (userId) {
      options = {...options,  user_id: userId};
    }

    const amplitudeIdentify = new amplitude.Identify();
    const eventProperties = properties;
    if (eventProperties != null) {
      for (const [key, value] of Object.entries(eventProperties)) {
        amplitudeIdentify.set(key, value);
      }
    }
    return this.amplitude!.identify(
      amplitudeIdentify,
      options,
    );
  }

 /**
  * Flush the event.
  */
  flush() : PromiseResult<Result> {
    if (!this.isInitializedAndEnabled()) {
      return getVoidPromiseResult();
    }

    return this.amplitude!.flush();
  }

  /**
   * Track event
   *
   * @param event The event to track.
   * @param options Optional event options.
   */
  track(event: Event, options?: EventOptions): PromiseResult<Result> {
    if (!this.isInitializedAndEnabled()) {
      return getVoidPromiseResult();
    }

    return this.amplitude!.track(event, undefined, options);
  }

  /**
   * CTA Button Clicked
   *
   * [View in Tracking Plan](https://data.amplitude.com/eldt/default/events/main/latest/CTA%20Button%20Clicked)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. Button ID)
   * @param options Amplitude event options.
   */
  ctaButtonClicked(
    properties: CtaButtonClickedProperties,
    options?: EventOptions,
  ) {
    return this.track(new CtaButtonClicked(properties), options);
  }

  /**
   * Email Verified
   *
   * [View in Tracking Plan](https://data.amplitude.com/eldt/default/events/main/latest/Email%20Verified)
   *
   * Event has no description in tracking plan.
   *
   * @param options Amplitude event options.
   */
  emailVerified(
    options?: EventOptions,
  ) {
    return this.track(new EmailVerified(), options);
  }

  /**
   * Endorsement Toggled
   *
   * [View in Tracking Plan](https://data.amplitude.com/eldt/default/events/main/latest/Endorsement%20Toggled)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. endorsement)
   * @param options Amplitude event options.
   */
  endorsementToggled(
    properties: EndorsementToggledProperties,
    options?: EventOptions,
  ) {
    return this.track(new EndorsementToggled(properties), options);
  }

  /**
   * Login
   *
   * [View in Tracking Plan](https://data.amplitude.com/eldt/default/events/main/latest/Login)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. type)
   * @param options Amplitude event options.
   */
  login(
    properties: LoginProperties,
    options?: EventOptions,
  ) {
    return this.track(new Login(properties), options);
  }

  /**
   * Package Selected
   *
   * [View in Tracking Plan](https://data.amplitude.com/eldt/default/events/main/latest/Package%20Selected)
   *
   * Indicates a student selecting a package during the registration process. Packages are built by schools. ELDT.com has A, B, B-A, and "Endorsements" only package.
   *
   * @param properties The event's properties (e.g. package id)
   * @param options Amplitude event options.
   */
  packageSelected(
    properties: PackageSelectedProperties,
    options?: EventOptions,
  ) {
    return this.track(new PackageSelected(properties), options);
  }

  /**
   * Power Lead Form Submitted
   *
   * [View in Tracking Plan](https://data.amplitude.com/eldt/default/events/main/latest/Power%20Lead%20Form%20Submitted)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. city)
   * @param options Amplitude event options.
   */
  powerLeadFormSubmitted(
    properties: PowerLeadFormSubmittedProperties,
    options?: EventOptions,
  ) {
    return this.track(new PowerLeadFormSubmitted(properties), options);
  }

  /**
   * Purchase
   *
   * [View in Tracking Plan](https://data.amplitude.com/eldt/default/events/main/latest/Purchase)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. product name)
   * @param options Amplitude event options.
   */
  purchase(
    properties: PurchaseProperties,
    options?: EventOptions,
  ) {
    return this.track(new Purchase(properties), options);
  }

  /**
   * Registration - Application Completed
   *
   * [View in Tracking Plan](https://data.amplitude.com/eldt/default/events/main/latest/Registration%20-%20Application%20Completed)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. city)
   * @param options Amplitude event options.
   */
  registrationApplicationCompleted(
    properties: RegistrationApplicationCompletedProperties,
    options?: EventOptions,
  ) {
    return this.track(new RegistrationApplicationCompleted(properties), options);
  }

  /**
   * Registration Step Submitted
   *
   * [View in Tracking Plan](https://data.amplitude.com/eldt/default/events/main/latest/Registration%20Step%20Submitted)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. completed)
   * @param options Amplitude event options.
   */
  registrationStepSubmitted(
    properties: RegistrationStepSubmittedProperties,
    options?: EventOptions,
  ) {
    return this.track(new RegistrationStepSubmitted(properties), options);
  }

  /**
   * Signup
   *
   * [View in Tracking Plan](https://data.amplitude.com/eldt/default/events/main/latest/Signup)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. type)
   * @param options Amplitude event options.
   */
  signup(
    properties: SignupProperties,
    options?: EventOptions,
  ) {
    return this.track(new Signup(properties), options);
  }
}

export const ampli = new Ampli();

// BASE TYPES
type BrowserOptions = amplitude.Types.BrowserOptions;

export type BrowserClient = amplitude.Types.BrowserClient;
export type BaseEvent = amplitude.Types.BaseEvent;
export type IdentifyEvent = amplitude.Types.IdentifyEvent;
export type GroupEvent = amplitude.Types.GroupIdentifyEvent;
export type Event = amplitude.Types.Event;
export type EventOptions = amplitude.Types.EventOptions;
export type Result = amplitude.Types.Result;
